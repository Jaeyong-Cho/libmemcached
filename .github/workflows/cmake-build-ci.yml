# Generated file; do not edit!
name: cmake-build-ci
on:
  push:
    paths-ignore:
      - "docs/**"
      - ".travis.yml"
      - ".cirrus.yml"
    branches-ignore:
      - gh-pages
      - catch
      - v1.x
  pull_request:
    branches:
      - master
      - v1.x
env:
  # defaults
  INSTALL_MEMCACHED:  memcached
  CMAKE_BUILD_TYPE:   Debug
  BUILD_TESTING:      "ON"
  ENABLE_SASL:        "OFF"
  ENABLE_HASH_HSIEH:  "ON"
  ENABLE_DTRACE:      "OFF"
  VERBOSE:            "ON"
  OS_VND:   Linux #
  OS_VER:   ubuntu-20.04 #
  CC_VND:   gnu #
  CC_VER:   cur #

jobs:

  # new memcached
  dbg-new:
    name: dbg-new (ubuntu-20.04, gnu, cur)
    runs-on: ubuntu-20.04 #
    env:
      INSTALL_MEMCACHED:
      MEMCACHED_PREFIX: /tmp
      ENABLE_SASL:      "ON"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/checkout@v2
        with:
          repository: memcached/memcached
          path: memcached
          ref: 1.6.7
      - name: Prepare environment (for cur gnu on ubuntu-20.04)
        if: (env.OS_VER=='ubuntu-20.04') && (env.CC_VND=='gnu') && (env.CC_VER=='cur')
        run: |
          echo CC="gcc-9" >> ${GITHUB_ENV}
          echo CXX="g++-9" >> ${GITHUB_ENV}
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install \
            libevent-dev \
            libsasl2-dev \
            ${INSTALL_MEMCACHED} \
            ${INSTALL_CC} ${INSTALL_CXX}
          sudo systemctl stop memcached || true
      - name: Install dependencies (Mac)
        if: runner.os == 'macOS'
        run: |
          brew install bison flex ${INSTALL_MEMCACHED}
          brew services stop memcached || true
          echo MEMCACHED_BINARY="/usr/local/bin/memcached" >> ${GITHUB_ENV}
      - name: Build memcached
        run: |
          if test -d memcached
          then
            cd memcached
            ./autogen.sh
            ./configure CFLAGS="-O2 -pipe" \
              --prefix=${MEMCACHED_PREFIX} \
              --enable-sasl \
              --enable-sasl-pwdb \
              --disable-coverage \
              --disable-dependency-tracking \
              --disable-docs \
              --disable-extstore \
              --disable-option-checking \
              ;
            make -j2
            make install
            cd ..
            echo MEMCACHED_BINARY="${MEMCACHED_PREFIX}/bin/memcached" >> ${GITHUB_ENV}
          fi
      - name: Generate build tree (${{ env.CMAKE_BUILD_TYPE }})
        run: cmake -S . -B build
      - name: Build all with ${{ env.CXX }} ${{ env.CXXFLAGS }}
        run: make -C build -j2 all
      - name: Test
        run: make -C build -j2 test
      - name: Install
        run: make -C build -j2 install DESTDIR=.
      - name: Failed tests log
        if: ${{ failure() }}
        run: cat build/Testing/Temporary/LastTest.log || true

  # sanitizer build
  dbg-san:
    name: dbg-san (ubuntu-20.04, gnu, cur)
    runs-on: ubuntu-20.04 #
    env:
      ENABLE_SANITIZERS: "address;undefined"
    steps:
      - uses: actions/checkout@v2
      - name: Prepare environment (for cur gnu on ubuntu-20.04)
        if: (env.OS_VER=='ubuntu-20.04') && (env.CC_VND=='gnu') && (env.CC_VER=='cur')
        run: |
          echo CC="gcc-9" >> ${GITHUB_ENV}
          echo CXX="g++-9" >> ${GITHUB_ENV}
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install \
            libevent-dev \
            libsasl2-dev \
            ${INSTALL_MEMCACHED} \
            ${INSTALL_CC} ${INSTALL_CXX}
          sudo systemctl stop memcached || true
      - name: Install dependencies (Mac)
        if: runner.os == 'macOS'
        run: |
          brew install bison flex ${INSTALL_MEMCACHED}
          brew services stop memcached || true
          echo MEMCACHED_BINARY="/usr/local/bin/memcached" >> ${GITHUB_ENV}
      - name: Build memcached
        run: |
          if test -d memcached
          then
            cd memcached
            ./autogen.sh
            ./configure CFLAGS="-O2 -pipe" \
              --prefix=${MEMCACHED_PREFIX} \
              --enable-sasl \
              --enable-sasl-pwdb \
              --disable-coverage \
              --disable-dependency-tracking \
              --disable-docs \
              --disable-extstore \
              --disable-option-checking \
              ;
            make -j2
            make install
            cd ..
            echo MEMCACHED_BINARY="${MEMCACHED_PREFIX}/bin/memcached" >> ${GITHUB_ENV}
          fi
      - name: Generate build tree (${{ env.CMAKE_BUILD_TYPE }})
        run: cmake -S . -B build
      - name: Build all with ${{ env.CXX }} ${{ env.CXXFLAGS }}
        run: make -C build -j2 all
      - name: Test
        run: make -C build -j2 test
      - name: Install
        run: make -C build -j2 install DESTDIR=.
      - name: Failed tests log
        if: ${{ failure() }}
        run: cat build/Testing/Temporary/LastTest.log || true

  # coverage build
  dbg-cov:
    name: dbg-cov (ubuntu-20.04, gnu, cur)
    runs-on: ubuntu-20.04 #
    env:
      CFLAGS: -O0 --coverage
      CXXFLAGS: -O0 --coverage
    steps:
      - uses: actions/checkout@v2
      - name: Prepare environment (for cur gnu on ubuntu-20.04)
        if: (env.OS_VER=='ubuntu-20.04') && (env.CC_VND=='gnu') && (env.CC_VER=='cur')
        run: |
          echo CC="gcc-9" >> ${GITHUB_ENV}
          echo CXX="g++-9" >> ${GITHUB_ENV}
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install \
            libevent-dev \
            libsasl2-dev \
            ${INSTALL_MEMCACHED} \
            ${INSTALL_CC} ${INSTALL_CXX}
          sudo systemctl stop memcached || true
      - name: Install dependencies (Mac)
        if: runner.os == 'macOS'
        run: |
          brew install bison flex ${INSTALL_MEMCACHED}
          brew services stop memcached || true
          echo MEMCACHED_BINARY="/usr/local/bin/memcached" >> ${GITHUB_ENV}
      - name: Build memcached
        run: |
          if test -d memcached
          then
            cd memcached
            ./autogen.sh
            ./configure CFLAGS="-O2 -pipe" \
              --prefix=${MEMCACHED_PREFIX} \
              --enable-sasl \
              --enable-sasl-pwdb \
              --disable-coverage \
              --disable-dependency-tracking \
              --disable-docs \
              --disable-extstore \
              --disable-option-checking \
              ;
            make -j2
            make install
            cd ..
            echo MEMCACHED_BINARY="${MEMCACHED_PREFIX}/bin/memcached" >> ${GITHUB_ENV}
          fi
      - name: Generate build tree (${{ env.CMAKE_BUILD_TYPE }})
        run: cmake -S . -B build
      - name: Build all with ${{ env.CXX }} ${{ env.CXXFLAGS }}
        run: make -C build -j2 all
      - name: Test
        run: make -C build -j2 test
      - name: Install
        run: make -C build -j2 install DESTDIR=.
      - name: Failed tests log
        if: ${{ failure() }}
        run: cat build/Testing/Temporary/LastTest.log || true
      - uses: codecov/codecov-action@v1.0.13

  # mac build
  dbg-mac:
    name: dbg-mac (macos-10.15, clang, apple)
    runs-on: macos-10.15 #
    continue-on-error: true
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install \
            libevent-dev \
            libsasl2-dev \
            ${INSTALL_MEMCACHED} \
            ${INSTALL_CC} ${INSTALL_CXX}
          sudo systemctl stop memcached || true
      - name: Install dependencies (Mac)
        if: runner.os == 'macOS'
        run: |
          brew install bison flex ${INSTALL_MEMCACHED}
          brew services stop memcached || true
          echo MEMCACHED_BINARY="/usr/local/bin/memcached" >> ${GITHUB_ENV}
      - name: Build memcached
        run: |
          if test -d memcached
          then
            cd memcached
            ./autogen.sh
            ./configure CFLAGS="-O2 -pipe" \
              --prefix=${MEMCACHED_PREFIX} \
              --enable-sasl \
              --enable-sasl-pwdb \
              --disable-coverage \
              --disable-dependency-tracking \
              --disable-docs \
              --disable-extstore \
              --disable-option-checking \
              ;
            make -j2
            make install
            cd ..
            echo MEMCACHED_BINARY="${MEMCACHED_PREFIX}/bin/memcached" >> ${GITHUB_ENV}
          fi
      - name: Generate build tree (${{ env.CMAKE_BUILD_TYPE }})
        run: cmake -S . -B build
      - name: Build all with ${{ env.CXX }} ${{ env.CXXFLAGS }}
        run: make -C build -j2 all
      - name: Test
        run: make -C build -j2 test
      - name: Install
        run: make -C build -j2 install DESTDIR=.
      - name: Failed tests log
        if: ${{ failure() }}
        run: cat build/Testing/Temporary/LastTest.log || true

  # release builds
  release:
    strategy:
      fail-fast: false
      matrix:
        os_ver: [ubuntu-20.04, ubuntu-18.04]
        cc_vnd: [gnu, clang]
        cc_ver: [new, cur, old]
    runs-on: ${{ matrix.os_ver }}
    continue-on-error: ${{ matrix.cc_vnd == 'clang' }}
    env:
      CMAKE_BUILD_TYPE: Release
      OS_VND: Linux
      OS_VER: ${{ matrix.os_ver }}
      CC_VND: ${{ matrix.cc_vnd }}
      CC_VER: ${{ matrix.cc_ver }}
    steps:
      - uses: actions/checkout@v2
      - name: Prepare environment (for new gnu on ubuntu-20.04)
        if: (env.OS_VER=='ubuntu-20.04') && (env.CC_VND=='gnu') && (env.CC_VER=='new')
        run: |
          echo CC="gcc-10" >> ${GITHUB_ENV}
          echo CXX="g++-10" >> ${GITHUB_ENV}
          echo INSTALL_CC="gcc-10" >> ${GITHUB_ENV}
          echo INSTALL_CXX="g++-10" >> ${GITHUB_ENV}
      - name: Prepare environment (for cur gnu on ubuntu-20.04)
        if: (env.OS_VER=='ubuntu-20.04') && (env.CC_VND=='gnu') && (env.CC_VER=='cur')
        run: |
          echo CC="gcc-9" >> ${GITHUB_ENV}
          echo CXX="g++-9" >> ${GITHUB_ENV}
      - name: Prepare environment (for old gnu on ubuntu-20.04)
        if: (env.OS_VER=='ubuntu-20.04') && (env.CC_VND=='gnu') && (env.CC_VER=='old')
        run: |
          echo CC="gcc-8" >> ${GITHUB_ENV}
          echo CXX="g++-8" >> ${GITHUB_ENV}
      - name: Prepare environment (for new clang on ubuntu-20.04)
        if: (env.OS_VER=='ubuntu-20.04') && (env.CC_VND=='clang') && (env.CC_VER=='new')
        run: |
          echo CC="clang-10" >> ${GITHUB_ENV}
          echo CXX="clang++-10" >> ${GITHUB_ENV}
      - name: Prepare environment (for cur clang on ubuntu-20.04)
        if: (env.OS_VER=='ubuntu-20.04') && (env.CC_VND=='clang') && (env.CC_VER=='cur')
        run: |
          echo CC="clang-9" >> ${GITHUB_ENV}
          echo CXX="clang++-9" >> ${GITHUB_ENV}
      - name: Prepare environment (for old clang on ubuntu-20.04)
        if: (env.OS_VER=='ubuntu-20.04') && (env.CC_VND=='clang') && (env.CC_VER=='old')
        run: |
          echo CC="clang-8" >> ${GITHUB_ENV}
          echo CXX="clang++-8" >> ${GITHUB_ENV}
      - name: Prepare environment (for new gnu on ubuntu-18.04)
        if: (env.OS_VER=='ubuntu-18.04') && (env.CC_VND=='gnu') && (env.CC_VER=='new')
        run: |
          echo CC="gcc-9" >> ${GITHUB_ENV}
          echo CXX="g++-9" >> ${GITHUB_ENV}
      - name: Prepare environment (for cur gnu on ubuntu-18.04)
        if: (env.OS_VER=='ubuntu-18.04') && (env.CC_VND=='gnu') && (env.CC_VER=='cur')
        run: |
          echo CC="gcc-8" >> ${GITHUB_ENV}
          echo CXX="g++-8" >> ${GITHUB_ENV}
      - name: Prepare environment (for old gnu on ubuntu-18.04)
        if: (env.OS_VER=='ubuntu-18.04') && (env.CC_VND=='gnu') && (env.CC_VER=='old')
        run: |
          echo CC="gcc-7" >> ${GITHUB_ENV}
          echo CXX="g++-7" >> ${GITHUB_ENV}
      - name: Prepare environment (for new clang on ubuntu-18.04)
        if: (env.OS_VER=='ubuntu-18.04') && (env.CC_VND=='clang') && (env.CC_VER=='new')
        run: |
          echo CC="clang-9" >> ${GITHUB_ENV}
          echo CXX="clang++-9" >> ${GITHUB_ENV}
      - name: Prepare environment (for cur clang on ubuntu-18.04)
        if: (env.OS_VER=='ubuntu-18.04') && (env.CC_VND=='clang') && (env.CC_VER=='cur')
        run: |
          echo CC="clang-8" >> ${GITHUB_ENV}
          echo CXX="clang++-8" >> ${GITHUB_ENV}
      - name: Prepare environment (for old clang on ubuntu-18.04)
        if: (env.OS_VER=='ubuntu-18.04') && (env.CC_VND=='clang') && (env.CC_VER=='old')
        run: |
          echo CC="clang-6.0" >> ${GITHUB_ENV}
          echo CXX="clang++-6.0" >> ${GITHUB_ENV}
          echo CXXFLAGS="-stdlib=libc++" >> ${GITHUB_ENV}
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install \
            libevent-dev \
            libsasl2-dev \
            ${INSTALL_MEMCACHED} \
            ${INSTALL_CC} ${INSTALL_CXX}
          sudo systemctl stop memcached || true
      - name: Install dependencies (Mac)
        if: runner.os == 'macOS'
        run: |
          brew install bison flex ${INSTALL_MEMCACHED}
          brew services stop memcached || true
          echo MEMCACHED_BINARY="/usr/local/bin/memcached" >> ${GITHUB_ENV}
      - name: Build memcached
        run: |
          if test -d memcached
          then
            cd memcached
            ./autogen.sh
            ./configure CFLAGS="-O2 -pipe" \
              --prefix=${MEMCACHED_PREFIX} \
              --enable-sasl \
              --enable-sasl-pwdb \
              --disable-coverage \
              --disable-dependency-tracking \
              --disable-docs \
              --disable-extstore \
              --disable-option-checking \
              ;
            make -j2
            make install
            cd ..
            echo MEMCACHED_BINARY="${MEMCACHED_PREFIX}/bin/memcached" >> ${GITHUB_ENV}
          fi
      - name: Generate build tree (${{ env.CMAKE_BUILD_TYPE }})
        run: cmake -S . -B build
      - name: Build all with ${{ env.CXX }} ${{ env.CXXFLAGS }}
        run: make -C build -j2 all
      - name: Test
        run: make -C build -j2 test
      - name: Install
        run: make -C build -j2 install DESTDIR=.
      - name: Failed tests log
        if: ${{ failure() }}
        run: cat build/Testing/Temporary/LastTest.log || true
